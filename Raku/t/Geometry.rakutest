#!/usr/bin/env raku

use AOC::Util;
use AOC::Geometry;
use Test;

my $NUM_TESTS := 49;
plan $NUM_TESTS;

test_coord2d();
test_pos2d();
test_extent2d();

done-testing;

sub test_coord2d() {
	say 'Testing ' ~ Coord.^name;
	my $c2d = Coord.new(x => 10, y => 30);
	my $c_str = $c2d.Str;
	ok $c_str eq "[10,30]" or diag "c2 str $c_str";

	my $c_from_str = Coord.from_str($c_str);
	ok $c_from_str eqv $c2d or diag "c2_from_str $c_from_str";

	my $other = Coord.new(x => 10, y => 30);
	ok $other eqv $c2d or diag "Equal coords are unequal.";

	$other = Coord.new(x => 5,  y=> 20);
	nok $c2d eqv $other or diag "Unequal coords are equal.";

	my $origin = Coord.origin();
	ok Coord.new(x => 0, y => 0) eqv $origin or diag 'Origin check';

	my $delta = $c2d.delta($other);
	ok $delta.col == -5 && $delta.row == -10 or diag "Delta $delta.Str";

	ok approx_equal($c2d.distanceTo($other).Rat, 11.1803398874989) or diag "Distance wasn't within tolerance.";
	ok $c2d.manhattanDistanceTo($other) == 15 or diag "Manhattan distance was not correct.";

	ok $origin.offset('N') eqv Coord.from_ints( 0,-1) or diag "Testing offset N";
	ok $origin.offset('<') eqv Coord.from_ints(-1, 0) or diag "Testing offset <";
	ok $origin.offset('?') eqv Coord.from_ints( 0, 0) or diag "Testing offset ?";

	$other = Coord.from_ints(1,1);
	nok $origin.is_adjacent( $other ) or diag "Tested diagonal coord not adjacent for ROOK rule.";
	ok $origin.is_adjacent( $other, AOC::Geometry::AdjacencyRule::BISHOP ) or diag "Tested diagonal coord is adjacent for BISHOP rule.";
	my @adj_coords = $origin.get_adjacent_coords();
	ok @adj_coords.elems == 4 or diag "!4 adjacent coords for ROOK.";
}

sub test_pos2d() {
	say "\nTesting Pos2D";
	my $p2d = Position.new( coord => Coord.origin );
	ok $p2d.coord eqv Coord.origin or diag 'Tested make - location';
	ok $p2d.dir eq 'N' or diag 'Tested make - default direction';

	$p2d = Position.new(coord=>Coord.new(x=>5,y=>5), dir=>'<' );
	ok $p2d.dir eq 'W' or diag 'Tested make direction <';
	$p2d = $p2d.turn( 'CW' );
	ok $p2d.dir eq 'N' or diag 'Tested turning CW once.';
	$p2d = $p2d.turn( 'CCW' );
	ok $p2d.dir eq 'W' or diag 'Tested turning CCW once.';
	for (0..5) {
		$p2d = $p2d.turn( 'CCW' );
	}
	ok $p2d.dir eq 'E' or diag 'Tested turning CCW six times.';

	$p2d = $p2d.move_forward();
	ok $p2d.coord eqv Coord.new(x=>6,y=>5) or diag 'Tested moving forward once';
	$p2d = $p2d.move_forward(4);
	ok $p2d.coord eqv Coord.new(x=>10,y=>5) or diag 'Tested moving forward 4';

	my $bad = Position.new( coord=>Coord.origin, dir=>'?' );
	my $moved = $bad.move_forward();
	nok $bad eqv $moved or diag "Tested moving with a bad direction.";
	ok $moved.coord eqv Coord.new(x=>0,y=>-1) or diag "Expected default direction to be N.";
}


sub test_extent2d() {
	say "\nTesting Extent2D";

	my @c = (
		Coord.new(x => -1, y => 1),
		Coord.new(x => 2, y => 8),
		Coord.new(x => 3, y => 3),
		Coord.new(x => 4, y => 4));
	my @c_list = ( @c[2], @c[1], @c[0] );

	# from_coords from_ints expand_to_fit
	my @e = (
		Extent.from_coords( (@c[0], @c[1]) ),
		Extent.from_coords( @c_list ));
	@e.push( @e[1].expand_to_fit(@c[3]) );

	ok @e[0].nw.x == -1 && @e[0].nw.y == 1 &&
		@e[0].se.x == 2 && @e[0].se.y == 8 or diag
		@e[0].Str ~ " did not have the expected values.";
	ok @e[1].nw.x == -1 && @e[1].nw.y == 1 &&
		@e[1].se.x == 3 && @e[1].se.y == 8 or diag
		@e[1].Str ~ " did not have the expected values.";
	ok @e[2].nw.x == -1 && @e[2].nw.y == 1 &&
		@e[2].se.x == 4 && @e[2].se.y == 8 or diag
		@e[2].to_str() ~ " did not have the expected values.";

	# min max width height area
	ok @e[2].nw eqv (Coord.from_ints(-1,1)) or diag @e[2].Str ~ " min wasn't correct.";
	ok @e[2].se eqv (Coord.from_ints( 4,8)) or diag @e[2].Str ~ " max wasn't correct.";
	ok @e[1].width == 5 or diag @e[1].Str ~ " width wasn't correct.";
	ok @e[1].height == 8 or diag @e[1].Str ~ " height wasn't correct.";
	ok @e[1].area == 40 or diag @e[1].Str ~ " area wasn't correct.";

	# equal
	my $e_clone = @e[2].clone;
	ok @e[2] eqv $e_clone or diag @e[2].Str ~ " wasn't equal to clone " ~ $e_clone.Str;
	ok @e[2] eqv Extent.from_ints(-1,1,4,8) or diag @e[2].Str  ~ " wasn't equal to -1,1,4,8";

	# contains
	ok @e[1].contains(@c[1]) or diag @e[1].Str ~ " doesn't contain " ~ @c[1].Str;
	ok @e[2].contains(@c[3]) or diag @e[2].Str ~ " doesn't contain " ~ @c[3].Str;

	# inset
	ok @e[0].inset(1) eqv Extent.from_ints(0,2,1,7) or diag "Inset extent by 1";
	nok @e[0].inset(2).is_empty or diag "Inset to negative width is not empty.";

	@e.push(
		Extent.from_ints(1,1,10,10).intersect(Extent.from_ints(5,5,12,12)),
		Extent.from_ints(1,1,10,10).intersect(Extent.from_ints(5,5,7,7)),
		Extent.from_ints(1,1,10,10).intersect(Extent.from_ints(1,1,12,2)),
		Extent.from_ints(1,1,10,10).intersect(Extent.from_ints(11,11,12,12)),
		Extent.from_ints(1,1,10,10).intersect(Extent.from_ints(1,10,10,20)));

	# intersect
	ok @e[3] eqv Extent.from_ints(5,5,10,10) or diag "Intersect result wasn't correct";
	ok @e[4] eqv Extent.from_ints(5,5,7,7) or diag "Intersect result wasn't correct";
	ok @e[5] eqv Extent.from_ints(1,1,10,2) or diag "Intersect result wasn't correct";
	ok @e[6].is_empty or diag "Intersect result wasn't empty";
	ok @e[7] eqv Extent.from_ints(1,10,10,10) or diag "Intersect result wasn't correct";

	# union
	my @products = Extent.from_ints(1,1,10,10).union(Extent.from_ints(5,5,12,12));
	my @expected = [Extent.from_ints(5,5,10,10),Extent.from_ints(1,1,4,4),Extent.from_ints(1,5,4,10),Extent.from_ints(5,1,10,4),Extent.from_ints(11,11,12,12),Extent.from_ints(11,5,12,10),Extent.from_ints(5,11,10,12)];
	ok _test_extent_union(@products, @expected) or diag "Union result wasn't correct.";
	@products = Extent.from_ints(1,1,10,10).union(Extent.from_ints(5,5,7,7));
	@expected = [Extent.from_ints(5,5,7,7),Extent.from_ints(1,1,4,4),Extent.from_ints(1,8,4,10),Extent.from_ints(1,5,4,7),Extent.from_ints(8,1,10,4),Extent.from_ints(8,8,10,10),Extent.from_ints(8,5,10,7),Extent.from_ints(5,1,7,4),Extent.from_ints(5,8,7,10)];
	ok _test_extent_union(@products, @expected) or diag "Union result wasn't correct.";
	@products = Extent.from_ints(1,1,10,10).union(Extent.from_ints(1,1,12,2));
	@expected = [Extent.from_ints(1,1,10,2),Extent.from_ints(1,3,10,10),Extent.from_ints(11,1,12,2)];
	ok _test_extent_union(@products, @expected) or diag "Union result wasn't correct.";
	@products = Extent.from_ints(1,1,10,10).union(Extent.from_ints(11,11,12,12));
	@expected = [Extent.from_ints(1,1,10,10),Extent.from_ints(11,11,12,12)];
	ok _test_extent_union(@products, @expected) or diag "Union result wasn't correct.";
	@products = Extent.from_ints(1,1,10,10).union(Extent.from_ints(1,10,10,20));
	@expected = [Extent.from_ints(1,10,10,10),Extent.from_ints(1,1,10,9),Extent.from_ints(1,11,10,20)];
	ok _test_extent_union(@products, @expected) or diag "Union result wasn't correct.";


	# all_coords
	my @all_coords = @e[1].all_coords;
# 	print(Dumper(map {$_->to_str()} @all_coords));
	ok @all_coords.elems == @e[1].area or diag "Number of coordinates isn't equal to the area." ;
}


sub _test_extent_union(@actual, @expected) {
# 	my @strs = map {$_ ? $_->to_str() : $_} @actual;
# 	say "Actual: " . join(",", @strs);
# 	@strs = map {$_ ? $_->to_str() : $_} @expected;
# 	say "Expected: " . join(",", @strs);

	if @actual.elems != @expected.elems {
		say "Number of resultants (" ~ @actual.elems ~ ") does not match expected (" ~ @expected.elems ~ ")";
		return 0;
	}

	for @actual Z @expected -> ($a, $e) {
		if !($a eqv $e) { return 0; }
	}
	return 1;
}
